*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main3.ll'
source_filename = "main3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main3.ll'
source_filename = "main3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main3.ll'
source_filename = "main3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main3.ll'
source_filename = "main3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z9fibonaccii(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  store i32 1, i32* %2, align 4
  br label %18

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @_Z9fibonaccii(i32 %12)
  %14 = load i32, i32* %3, align 4
  %15 = sub nsw i32 %14, 2
  %16 = call i32 @_Z9fibonaccii(i32 %15)
  %17 = add nsw i32 %13, %16
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %9
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $edi = COPY %16:gr32
272B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  %14:gr32 = COPY $eax
320B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
336B	  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %11:gr32
384B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  %9:gr32 = COPY $eax
432B	  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
448B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

464B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

480B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
496B	  $eax = COPY %19:gr32
512B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $edi = COPY %16:gr32
272B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  %14:gr32 = COPY $eax
320B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
336B	  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %11:gr32
384B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  %9:gr32 = COPY $eax
432B	  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
448B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

464B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

480B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
496B	  $eax = COPY %19:gr32
512B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine code sinking ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY %19:gr32
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z9fibonaccii: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = SUB32ri8 killed %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = SUB32ri8 killed %12:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = ADD32rr killed %14:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = COPY killed %17:gr32
  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = COPY killed %12:gr32
  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = COPY killed %14:gr32
  %7:gr32 = ADD32rr %7:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %16:gr32 = COPY killed %17:gr32
  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %16:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY killed $eax
  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %11:gr32 = COPY killed %12:gr32
  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %11:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY killed $eax
  %7:gr32 = COPY killed %14:gr32
  %7:gr32 = ADD32rr %7:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  $eax = COPY killed %19:gr32
  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = COPY killed %17:gr32
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY killed %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %14:gr32 = COPY killed $eax
336B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  %11:gr32 = COPY killed %12:gr32
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY killed %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
464B	  %7:gr32 = COPY killed %14:gr32
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY killed %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = COPY killed %17:gr32
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY killed %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %14:gr32 = COPY killed $eax
336B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  %11:gr32 = COPY killed %12:gr32
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY killed %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
464B	  %7:gr32 = COPY killed %14:gr32
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), killed %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY killed %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = COPY %17:gr32
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %14:gr32 = COPY killed $eax
336B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  %11:gr32 = COPY %12:gr32
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
464B	  %7:gr32 = COPY %14:gr32
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
224B	  %16:gr32 = COPY %17:gr32
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %14:gr32 = COPY killed $eax
336B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  %11:gr32 = COPY %12:gr32
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
464B	  %7:gr32 = COPY %14:gr32
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY killed $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY killed $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit killed $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  %16:gr32 = SUB32ri8 %16:gr32(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $edi = COPY %16:gr32
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY $eax
336B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  %11:gr32 = SUB32ri8 %11:gr32(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %11:gr32
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  %9:gr32 = COPY $eax
480B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  %19:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
544B	  $eax = COPY %19:gr32
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  renamable $ebx = COPY $eax
336B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  renamable $ebx = COPY $eax
336B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  renamable $ebx = COPY $eax
336B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.2, %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
64B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
80B	  JCC_1 %bb.2, 4, implicit killed $eflags

96B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.3, %bb.2

112B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
128B	  JCC_1 %bb.3, 5, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.4

160B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
176B	  JMP_1 %bb.4

192B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4

208B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
240B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  renamable $ebx = COPY $eax
336B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
368B	  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
496B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

512B	bb.4 (%ir-block.18):
	; predecessors: %bb.3, %bb.2

528B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
560B	  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Tail Duplication ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = COPY $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function _Z9fibonaccii: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.2, %bb.1
  liveins: $edi, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 1, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.2, 4, implicit killed $eflags

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 2, implicit-def $eflags :: (load 4 from %ir.3)
  JCC_1 %bb.3, 5, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1
  successors: %bb.4

  MOV32mi $rbp, 1, $noreg, -16, $noreg, 1 :: (store 4 into %ir.2)
  JMP_1 %bb.4

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4

  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  $ebx = MOV32rr $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  renamable $edi = SUB32ri8 killed renamable $edi(tied-def 0), 2, implicit-def dead $eflags
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $ebx = ADD32rr killed renamable $ebx(tied-def 0), killed renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $ebx :: (store 4 into %ir.2)

bb.4 (%ir-block.18):
; predecessors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function _Z9fibonaccii.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #1 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @_Z9fibonaccii(i32 1000000)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %2:gr32 = COPY $eax
128B	  %0:gr32 = MOV32r0 implicit-def $eflags
144B	  $eax = COPY %0:gr32
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %2:gr32 = COPY $eax
128B	  %0:gr32 = MOV32r0 implicit-def $eflags
144B	  $eax = COPY %0:gr32
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = MOV32ri 1000000
  $edi = COPY killed %1:gr32
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY killed %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
128B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
144B	  $eax = COPY killed %0:gr32
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY killed %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
128B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
144B	  $eax = COPY killed %0:gr32
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
128B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
144B	  $eax = COPY %0:gr32
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr32 = MOV32ri 1000000
64B	  $edi = COPY %1:gr32
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
128B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
144B	  $eax = COPY %0:gr32
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY killed $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %2:gr32 = COPY $eax
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 1000000
80B	  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  $eax = MOV32r0 implicit-def dead $eflags
160B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 1000000
  CALL64pcrel32 @_Z9fibonaccii, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

